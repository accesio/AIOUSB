/**
 * \mainpage AIOUSB C++ Class Library Reference
 *
 * \section Introduction
 *
 * The <span style="font-weight: bold;">AIOUSB C++ Class Library</span> is an object-oriented C++ layer that runs
 * on top of the AIOUSB library. All access to the USB devices is through fully object-oriented C++ classes. The
 * user never needs to call the underlying AIOUSB library, although that is possible if necessary.
 *
 * This C++ library supports all the features of all the USB products except the D/A streaming features of the
 * USB-DA12-8A product, although support for those features will be provided eventually. While the underlying AIOUSB
 * library has been thoroughly tested, this C++ library has not yet been thoroughly tested and should be considered
 * <span style="font-style: italic;">beta</span> software.
 *
 * \section Packaging
 *
 * As with the AIOUSB library, the AIOUSB C++ class library is packaged into several library (.a) files.
 * <span style="font-weight: bold; font-style: italic;">libclassaiousb.a</span> is a release version of the library
 * and <span style="font-weight: bold; font-style: italic;">libclassaiousbdbg.a</span> is a debug version, compiled
 * with the "-ggdb" compiler option and with assertion checks enabled. When linking programs that use the AIOUSB C++
 * class library, you must not only specify the AIOUSB C++ class library on the linker command line, but the AIOUSB
 * C library as well since the AIOUSB C++ class library uses AIOUSB.
 *
 * \section sample Sample Program
 *
 * Below is an example of a minimalist C++ program that demonstrates how to properly initialize the library, query
 * the device manager for devices, query an individual device for its product ID and name and then terminate use of the
 * library. If the AIOUSB C library and the AIOUSB C++ class library are properly installed, you should be able to
 * copy this sample program from this document, paste it into a file named
 * <span style="font-weight: bold; font-style: italic;">test.cpp</span> and compile it using the command shown below.
 * This program uses the first ACCES device it finds on the bus. A "real" application would probably be looking for
 * devices of a particular type, which can be located using one of the
 * <span style="font-style: italic;">AIOUSB::USBDeviceManager::getDeviceByProductID( int productID ) const</span> methods.
 *
 *<pre style="background: #eeffff; border: 1px solid #000000; margin-bottom: 0cm; padding: 0.1cm;">/*
 * * compile: g++ -ggdb -Wall -pthread -fPIC test.cpp ../libclassaiousbdbg.a ../../lib/libaiousbcppdbg.a -lusb-1.0 -o test
 * * /
 *\#include \<iostream\>
 *\#include \<iomanip\>
 *\#include \<<span style="background: #ffff80;">USBDeviceManager.hpp</span>\>
 *using namespace <span style="background: #ffff80;">AIOUSB</span>;
 *using namespace std;
 *int main( int argc, char *argv[] ) {
 *  int result = 0;
 *  <span style="background: #ffff80;">USBDeviceManager</span> deviceManager;
 *  try {
 *    deviceManager.<span style="background: #ffff80;">open</span>();
 *    <span style="background: #ffff80;">USBDeviceArray</span> devices = deviceManager.<span style="background: #ffff80;">getDeviceByProductID</span>( USBDeviceManager::MIN_PRODUCT_ID, USBDeviceManager::MAX_PRODUCT_ID );
 *    if( devices.size() > 0 ) {
 *      <span style="background: #ffff80;">USBDevice</span> &device = *devices.at( 0 );
 *      cout << "Found a device with product ID " << hex << device.<span style="background: #ffff80;">getProductID</span>() << " and name \'" << device.<span style="background: #ffff80;">getName</span>() << "\'" << endl;
 *    } else
 *      cout << "No devices found" << endl;
 *    deviceManager.<span style="background: #ffff80;">close</span>();
 *  } catch( exception &ex ) {
 *    cerr << "Error \'" << ex.what() << "\' occurred while manipulating device" << endl;
 *    result = 1;
 *    if( deviceManager.<span style="background: #ffff80;">isOpen</span>() )
 *      deviceManager.<span style="background: #ffff80;">close</span>();
 *  }  // catch( ...
 *  return result;
 *}  // main()</pre>
 *
 * The above example is obviously simplistic as well as generic. In a "real" application, one would search for devices of
 * a specific type (i.e. product ID) and then <span style="font-style: italic;">cast</span> instances of the generic class
 * <span style="font-style: italic;">AIOUSB::USBDevice</span> to a specific device class, such as
 * <span style="font-style: italic;">AIOUSB::USB_AI16_Family</span>.
 * <hr>
 * <span style="font-style: italic;">Document: $Revision: 1.2 $ $Date: 2009/12/24 19:43:43 $</span>
 */
